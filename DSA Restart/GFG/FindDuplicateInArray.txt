
Link>>>>https://practice.geeksforgeeks.org/problems/find-duplicates-in-an-array/1

Solution:

class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        // code here
        
        //ðŸŒŸ Space Complexity- O(N) Time Complexity - O(N)
        
        // unordered_set<int>uset;
        // set <int> set;
        // for(int i =0;i<n;i++){
        //     if(uset.find(arr[i])==uset.end()){
        //         uset.insert(arr[i]);
        //     }
        //     else{
        //       set.insert(arr[i]);
        //     }
        // }
        // vector<int> res;
        // for(int i:set){
        //     res.push_back(i);
        // }
        // if(res.size()==0){
        //     return {-1};
        // }
        // return res;
        
        //ðŸŒŸ Space Complexity - O(0) Time Complexity - O(N)
        // You kinda wanna memorize this shit
        // Mark the number index -ve if traversed
        
        set <int> set;
        vector<int>res;
        for(int i=0;i<n;i++){
            if(arr[i]==INT_MIN){
                if(arr[0]>=0){
                   if(arr[0]==0){
                    arr[0]=INT_MIN;
                }else{
                    arr[0]=-1*arr[0];
                } 
                }else{
                    set.insert(0);
                }
            }
            else if(arr[abs(arr[i])]>=0){
                if(arr[abs(arr[i])]==0){
                    arr[abs(arr[i])]=INT_MIN;
                }else{
                    arr[abs(arr[i])]=-1*arr[abs(arr[i])];
                }
            }
            else{
                set.insert(abs(arr[i]));
            }
        }
        for(int i:set){
            res.push_back(i);
        }
        if(res.size()==0){
            return {-1};
        }
        return res;
    }
};
