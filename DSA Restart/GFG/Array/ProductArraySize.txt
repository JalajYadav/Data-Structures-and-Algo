Link>>>https://practice.geeksforgeeks.org/problems/product-array-puzzle4525/1

Solution:
//Time Complexity: O(N)
//Space Complexity: O(N)

class Solution{
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
       
        //code here
        if(n==1){
            return {1};
        }
        if(n==2){
            return {nums[1],nums[0]};
        }
        
        if(nums[0]==0 ||  nums[n-1]==0){
            vector<long long int> out(n,0);
            return out;
        }
        vector<long long>left(n,1);
        vector<long long>right(n,1);
     
        left[0] = nums[0];
        for(int i=1;i<n;i++){
            left[i] = nums[i]*left[i-1];
        }
     
        right[n-1] = nums[n-1];
        for(int i=n-2;i>=0;i--){
            right[i]= nums[i]*right[i+1];
        }
     
        vector<long long>res(n,1);
        for(int i = 1;i<n-1;i++){
             res[i]=left[i-1]*right[i+1];
        }
        
        res[0]=(res[1]/nums[0])*nums[1];
        res[n-1]=(res[n-2]/nums[n-1])*nums[n-2];
     
        return res;
    }
};

