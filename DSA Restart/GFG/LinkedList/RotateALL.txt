Link: ===========================================================================================================

https://practice.geeksforgeeks.org/batch-problems/rotate-a-linked-list/0

Description:=================================================================================================

5. Rotate a Linked List 
Medium Accuracy: 33.33% Submissions: 100k+ Points: 4
Lamp
This problem is part of GFG SDE Sheet. Click here to view more.  

Given a singly linked list of size N. The task is to left-shift the linked list by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

Example 1:

Input:
N = 5
value[] = {2, 4, 7, 8, 9}
k = 3
Output: 8 9 2 4 7
Explanation:
Rotate 1: 4 -> 7 -> 8 -> 9 -> 2
Rotate 2: 7 -> 8 -> 9 -> 2 -> 4
Rotate 3: 8 -> 9 -> 2 -> 4 -> 7
Example 2:

Input:
N = 8
value[] = {1, 2, 3, 4, 5, 6, 7, 8}
k = 4
Output: 5 6 7 8 1 2 3 4

Your Task:
You don't need to read input or print anything. Your task is to complete the function rotate() which takes a head reference as the first argument and k as the second argument, and returns the head of the rotated linked list.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 103
1 <= k <= N

Solution : ==============================================================================================================

 Node* rotate(Node* head, int k)
    {
        // Your code here
        Node* endRunner = head;
        int i=1;
        while(endRunner->next!=NULL){
            i++;
            endRunner = endRunner->next;
        }
        
        k=k%i;
        if(k==0){
            return head;
        }
        
        Node* startRunner = head;
        Node* prevRunner = startRunner;
        while(k>0){
            k--;
            prevRunner = startRunner;
            startRunner=startRunner->next;
        }
        prevRunner->next = NULL;
        endRunner->next = head;
        return startRunner;
    }
